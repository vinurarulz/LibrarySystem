#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAO.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LibraryDB")]
	public partial class DB_ClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertUser_Type(User_Type instance);
    partial void UpdateUser_Type(User_Type instance);
    partial void DeleteUser_Type(User_Type instance);
    partial void InsertBarcode(Barcode instance);
    partial void UpdateBarcode(Barcode instance);
    partial void DeleteBarcode(Barcode instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBorrowDetail(BorrowDetail instance);
    partial void UpdateBorrowDetail(BorrowDetail instance);
    partial void DeleteBorrowDetail(BorrowDetail instance);
    partial void InsertBorrowHeader(BorrowHeader instance);
    partial void UpdateBorrowHeader(BorrowHeader instance);
    partial void DeleteBorrowHeader(BorrowHeader instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertFee(Fee instance);
    partial void UpdateFee(Fee instance);
    partial void DeleteFee(Fee instance);
    partial void InsertLoginz(Loginz instance);
    partial void UpdateLoginz(Loginz instance);
    partial void DeleteLoginz(Loginz instance);
    partial void InsertMainCategory(MainCategory instance);
    partial void UpdateMainCategory(MainCategory instance);
    partial void DeleteMainCategory(MainCategory instance);
    partial void InsertPenalty(Penalty instance);
    partial void UpdatePenalty(Penalty instance);
    partial void DeletePenalty(Penalty instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertRefree(Refree instance);
    partial void UpdateRefree(Refree instance);
    partial void DeleteRefree(Refree instance);
    partial void InsertRegister_fee(Register_fee instance);
    partial void UpdateRegister_fee(Register_fee instance);
    partial void DeleteRegister_fee(Register_fee instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DB_ClassDataContext() : 
				base(global::DAO.Properties.Settings.Default.LibraryDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_ClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<User_Type> User_Types
		{
			get
			{
				return this.GetTable<User_Type>();
			}
		}
		
		public System.Data.Linq.Table<Barcode> Barcodes
		{
			get
			{
				return this.GetTable<Barcode>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BorrowDetail> BorrowDetails
		{
			get
			{
				return this.GetTable<BorrowDetail>();
			}
		}
		
		public System.Data.Linq.Table<BorrowHeader> BorrowHeaders
		{
			get
			{
				return this.GetTable<BorrowHeader>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Fee> Fees
		{
			get
			{
				return this.GetTable<Fee>();
			}
		}
		
		public System.Data.Linq.Table<Loginz> Loginzs
		{
			get
			{
				return this.GetTable<Loginz>();
			}
		}
		
		public System.Data.Linq.Table<MainCategory> MainCategories
		{
			get
			{
				return this.GetTable<MainCategory>();
			}
		}
		
		public System.Data.Linq.Table<Penalty> Penalties
		{
			get
			{
				return this.GetTable<Penalty>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Refree> Refrees
		{
			get
			{
				return this.GetTable<Refree>();
			}
		}
		
		public System.Data.Linq.Table<Register_fee> Register_fees
		{
			get
			{
				return this.GetTable<Register_fee>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Author_ID;
		
		private string _Author1;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthor_IDChanging(int value);
    partial void OnAuthor_IDChanged();
    partial void OnAuthor1Changing(string value);
    partial void OnAuthor1Changed();
    #endregion
		
		public Author()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Author_ID
		{
			get
			{
				return this._Author_ID;
			}
			set
			{
				if ((this._Author_ID != value))
				{
					this.OnAuthor_IDChanging(value);
					this.SendPropertyChanging();
					this._Author_ID = value;
					this.SendPropertyChanged("Author_ID");
					this.OnAuthor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Author", Storage="_Author1", DbType="NVarChar(30)")]
		public string Author1
		{
			get
			{
				return this._Author1;
			}
			set
			{
				if ((this._Author1 != value))
				{
					this.OnAuthor1Changing(value);
					this.SendPropertyChanging();
					this._Author1 = value;
					this.SendPropertyChanged("Author1");
					this.OnAuthor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Book", Storage="_Books", ThisKey="Author_ID", OtherKey="Author_ID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Type")]
	public partial class User_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Type_ID;
		
		private System.Nullable<int> _User_Type1;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_Type_IDChanging(int value);
    partial void OnUser_Type_IDChanged();
    partial void OnUser_Type1Changing(System.Nullable<int> value);
    partial void OnUser_Type1Changed();
    #endregion
		
		public User_Type()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Type_ID
		{
			get
			{
				return this._User_Type_ID;
			}
			set
			{
				if ((this._User_Type_ID != value))
				{
					this.OnUser_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._User_Type_ID = value;
					this.SendPropertyChanged("User_Type_ID");
					this.OnUser_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="User_Type", Storage="_User_Type1", DbType="Int")]
		public System.Nullable<int> User_Type1
		{
			get
			{
				return this._User_Type1;
			}
			set
			{
				if ((this._User_Type1 != value))
				{
					this.OnUser_Type1Changing(value);
					this.SendPropertyChanging();
					this._User_Type1 = value;
					this.SendPropertyChanged("User_Type1");
					this.OnUser_Type1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Type_User", Storage="_Users", ThisKey="User_Type_ID", OtherKey="User_Type_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User_Type = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Barcode")]
	public partial class Barcode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Barcode_ID;
		
		private string _Barcode1;
		
		private System.Nullable<int> _Book_ID;
		
		private System.Nullable<int> _Status_ID;
		
		private EntitySet<BorrowDetail> _BorrowDetails;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarcode_IDChanging(int value);
    partial void OnBarcode_IDChanged();
    partial void OnBarcode1Changing(string value);
    partial void OnBarcode1Changed();
    partial void OnBook_IDChanging(System.Nullable<int> value);
    partial void OnBook_IDChanged();
    partial void OnStatus_IDChanging(System.Nullable<int> value);
    partial void OnStatus_IDChanged();
    #endregion
		
		public Barcode()
		{
			this._BorrowDetails = new EntitySet<BorrowDetail>(new Action<BorrowDetail>(this.attach_BorrowDetails), new Action<BorrowDetail>(this.detach_BorrowDetails));
			this._Book = default(EntityRef<Book>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Barcode_ID
		{
			get
			{
				return this._Barcode_ID;
			}
			set
			{
				if ((this._Barcode_ID != value))
				{
					this.OnBarcode_IDChanging(value);
					this.SendPropertyChanging();
					this._Barcode_ID = value;
					this.SendPropertyChanged("Barcode_ID");
					this.OnBarcode_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Barcode", Storage="_Barcode1", DbType="NVarChar(25)")]
		public string Barcode1
		{
			get
			{
				return this._Barcode1;
			}
			set
			{
				if ((this._Barcode1 != value))
				{
					this.OnBarcode1Changing(value);
					this.SendPropertyChanging();
					this._Barcode1 = value;
					this.SendPropertyChanged("Barcode1");
					this.OnBarcode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="Int")]
		public System.Nullable<int> Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int")]
		public System.Nullable<int> Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barcode_BorrowDetail", Storage="_BorrowDetails", ThisKey="Barcode_ID", OtherKey="Barcode_ID")]
		public EntitySet<BorrowDetail> BorrowDetails
		{
			get
			{
				return this._BorrowDetails;
			}
			set
			{
				this._BorrowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Barcode", Storage="_Book", ThisKey="Book_ID", OtherKey="Book_ID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Barcodes.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Barcodes.Add(this);
						this._Book_ID = value.Book_ID;
					}
					else
					{
						this._Book_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Barcode", Storage="_Status", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Barcodes.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Barcodes.Add(this);
						this._Status_ID = value.Status_ID;
					}
					else
					{
						this._Status_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Barcode = this;
		}
		
		private void detach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Barcode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Book_ID;
		
		private string _BName;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _Author_ID;
		
		private System.Nullable<int> _Publisher_ID;
		
		private System.Nullable<int> _MainCategory_ID;
		
		private EntitySet<Barcode> _Barcodes;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<MainCategory> _MainCategory;
		
		private EntityRef<Publisher> _Publisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBook_IDChanging(int value);
    partial void OnBook_IDChanged();
    partial void OnBNameChanging(string value);
    partial void OnBNameChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAuthor_IDChanging(System.Nullable<int> value);
    partial void OnAuthor_IDChanged();
    partial void OnPublisher_IDChanging(System.Nullable<int> value);
    partial void OnPublisher_IDChanged();
    partial void OnMainCategory_IDChanging(System.Nullable<int> value);
    partial void OnMainCategory_IDChanged();
    #endregion
		
		public Book()
		{
			this._Barcodes = new EntitySet<Barcode>(new Action<Barcode>(this.attach_Barcodes), new Action<Barcode>(this.detach_Barcodes));
			this._Author = default(EntityRef<Author>);
			this._MainCategory = default(EntityRef<MainCategory>);
			this._Publisher = default(EntityRef<Publisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BName", DbType="NVarChar(20)")]
		public string BName
		{
			get
			{
				return this._BName;
			}
			set
			{
				if ((this._BName != value))
				{
					this.OnBNameChanging(value);
					this.SendPropertyChanging();
					this._BName = value;
					this.SendPropertyChanged("BName");
					this.OnBNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_ID", DbType="Int")]
		public System.Nullable<int> Author_ID
		{
			get
			{
				return this._Author_ID;
			}
			set
			{
				if ((this._Author_ID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthor_IDChanging(value);
					this.SendPropertyChanging();
					this._Author_ID = value;
					this.SendPropertyChanged("Author_ID");
					this.OnAuthor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_ID", DbType="Int")]
		public System.Nullable<int> Publisher_ID
		{
			get
			{
				return this._Publisher_ID;
			}
			set
			{
				if ((this._Publisher_ID != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisher_IDChanging(value);
					this.SendPropertyChanging();
					this._Publisher_ID = value;
					this.SendPropertyChanged("Publisher_ID");
					this.OnPublisher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainCategory_ID", DbType="Int")]
		public System.Nullable<int> MainCategory_ID
		{
			get
			{
				return this._MainCategory_ID;
			}
			set
			{
				if ((this._MainCategory_ID != value))
				{
					if (this._MainCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._MainCategory_ID = value;
					this.SendPropertyChanged("MainCategory_ID");
					this.OnMainCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Barcode", Storage="_Barcodes", ThisKey="Book_ID", OtherKey="Book_ID")]
		public EntitySet<Barcode> Barcodes
		{
			get
			{
				return this._Barcodes;
			}
			set
			{
				this._Barcodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Book", Storage="_Author", ThisKey="Author_ID", OtherKey="Author_ID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Author_ID = value.Author_ID;
					}
					else
					{
						this._Author_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_Book", Storage="_MainCategory", ThisKey="MainCategory_ID", OtherKey="MainCategory_ID", IsForeignKey=true)]
		public MainCategory MainCategory
		{
			get
			{
				return this._MainCategory.Entity;
			}
			set
			{
				MainCategory previousValue = this._MainCategory.Entity;
				if (((previousValue != value) 
							|| (this._MainCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MainCategory.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._MainCategory.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._MainCategory_ID = value.MainCategory_ID;
					}
					else
					{
						this._MainCategory_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MainCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Book", Storage="_Publisher", ThisKey="Publisher_ID", OtherKey="Publisher_ID", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Publisher_ID = value.Publisher_ID;
					}
					else
					{
						this._Publisher_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BorrowDetail")]
	public partial class BorrowDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BorrowDetail_ID;
		
		private System.Nullable<int> _BorrowHeader_ID;
		
		private System.Nullable<int> _Barcode_ID;
		
		private System.Nullable<int> _Status_ID;
		
		private EntityRef<Barcode> _Barcode;
		
		private EntityRef<BorrowHeader> _BorrowHeader;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowDetail_IDChanging(int value);
    partial void OnBorrowDetail_IDChanged();
    partial void OnBorrowHeader_IDChanging(System.Nullable<int> value);
    partial void OnBorrowHeader_IDChanged();
    partial void OnBarcode_IDChanging(System.Nullable<int> value);
    partial void OnBarcode_IDChanged();
    partial void OnStatus_IDChanging(System.Nullable<int> value);
    partial void OnStatus_IDChanged();
    #endregion
		
		public BorrowDetail()
		{
			this._Barcode = default(EntityRef<Barcode>);
			this._BorrowHeader = default(EntityRef<BorrowHeader>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDetail_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BorrowDetail_ID
		{
			get
			{
				return this._BorrowDetail_ID;
			}
			set
			{
				if ((this._BorrowDetail_ID != value))
				{
					this.OnBorrowDetail_IDChanging(value);
					this.SendPropertyChanging();
					this._BorrowDetail_ID = value;
					this.SendPropertyChanged("BorrowDetail_ID");
					this.OnBorrowDetail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowHeader_ID", DbType="Int")]
		public System.Nullable<int> BorrowHeader_ID
		{
			get
			{
				return this._BorrowHeader_ID;
			}
			set
			{
				if ((this._BorrowHeader_ID != value))
				{
					if (this._BorrowHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowHeader_IDChanging(value);
					this.SendPropertyChanging();
					this._BorrowHeader_ID = value;
					this.SendPropertyChanged("BorrowHeader_ID");
					this.OnBorrowHeader_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode_ID", DbType="Int")]
		public System.Nullable<int> Barcode_ID
		{
			get
			{
				return this._Barcode_ID;
			}
			set
			{
				if ((this._Barcode_ID != value))
				{
					if (this._Barcode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarcode_IDChanging(value);
					this.SendPropertyChanging();
					this._Barcode_ID = value;
					this.SendPropertyChanged("Barcode_ID");
					this.OnBarcode_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int")]
		public System.Nullable<int> Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barcode_BorrowDetail", Storage="_Barcode", ThisKey="Barcode_ID", OtherKey="Barcode_ID", IsForeignKey=true)]
		public Barcode Barcode
		{
			get
			{
				return this._Barcode.Entity;
			}
			set
			{
				Barcode previousValue = this._Barcode.Entity;
				if (((previousValue != value) 
							|| (this._Barcode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barcode.Entity = null;
						previousValue.BorrowDetails.Remove(this);
					}
					this._Barcode.Entity = value;
					if ((value != null))
					{
						value.BorrowDetails.Add(this);
						this._Barcode_ID = value.Barcode_ID;
					}
					else
					{
						this._Barcode_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Barcode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowHeader_BorrowDetail", Storage="_BorrowHeader", ThisKey="BorrowHeader_ID", OtherKey="BorrowHeader_ID", IsForeignKey=true)]
		public BorrowHeader BorrowHeader
		{
			get
			{
				return this._BorrowHeader.Entity;
			}
			set
			{
				BorrowHeader previousValue = this._BorrowHeader.Entity;
				if (((previousValue != value) 
							|| (this._BorrowHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BorrowHeader.Entity = null;
						previousValue.BorrowDetails.Remove(this);
					}
					this._BorrowHeader.Entity = value;
					if ((value != null))
					{
						value.BorrowDetails.Add(this);
						this._BorrowHeader_ID = value.BorrowHeader_ID;
					}
					else
					{
						this._BorrowHeader_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BorrowHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_BorrowDetail", Storage="_Status", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.BorrowDetails.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.BorrowDetails.Add(this);
						this._Status_ID = value.Status_ID;
					}
					else
					{
						this._Status_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BorrowHeader")]
	public partial class BorrowHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BorrowHeader_ID;
		
		private System.Nullable<System.DateTime> _Borrow_Date;
		
		private System.Nullable<System.DateTime> _Receive_Date;
		
		private System.Nullable<int> _User_ID;
		
		private EntitySet<BorrowDetail> _BorrowDetails;
		
		private EntitySet<Penalty> _Penalties;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowHeader_IDChanging(int value);
    partial void OnBorrowHeader_IDChanged();
    partial void OnBorrow_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrow_DateChanged();
    partial void OnReceive_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceive_DateChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    #endregion
		
		public BorrowHeader()
		{
			this._BorrowDetails = new EntitySet<BorrowDetail>(new Action<BorrowDetail>(this.attach_BorrowDetails), new Action<BorrowDetail>(this.detach_BorrowDetails));
			this._Penalties = new EntitySet<Penalty>(new Action<Penalty>(this.attach_Penalties), new Action<Penalty>(this.detach_Penalties));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowHeader_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BorrowHeader_ID
		{
			get
			{
				return this._BorrowHeader_ID;
			}
			set
			{
				if ((this._BorrowHeader_ID != value))
				{
					this.OnBorrowHeader_IDChanging(value);
					this.SendPropertyChanging();
					this._BorrowHeader_ID = value;
					this.SendPropertyChanged("BorrowHeader_ID");
					this.OnBorrowHeader_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Borrow_Date
		{
			get
			{
				return this._Borrow_Date;
			}
			set
			{
				if ((this._Borrow_Date != value))
				{
					this.OnBorrow_DateChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Date = value;
					this.SendPropertyChanged("Borrow_Date");
					this.OnBorrow_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receive_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Receive_Date
		{
			get
			{
				return this._Receive_Date;
			}
			set
			{
				if ((this._Receive_Date != value))
				{
					this.OnReceive_DateChanging(value);
					this.SendPropertyChanging();
					this._Receive_Date = value;
					this.SendPropertyChanged("Receive_Date");
					this.OnReceive_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowHeader_BorrowDetail", Storage="_BorrowDetails", ThisKey="BorrowHeader_ID", OtherKey="BorrowHeader_ID")]
		public EntitySet<BorrowDetail> BorrowDetails
		{
			get
			{
				return this._BorrowDetails;
			}
			set
			{
				this._BorrowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowHeader_Penalty", Storage="_Penalties", ThisKey="BorrowHeader_ID", OtherKey="BorrowHeader_ID")]
		public EntitySet<Penalty> Penalties
		{
			get
			{
				return this._Penalties;
			}
			set
			{
				this._Penalties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BorrowHeader", Storage="_User", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BorrowHeaders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BorrowHeaders.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.BorrowHeader = this;
		}
		
		private void detach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.BorrowHeader = null;
		}
		
		private void attach_Penalties(Penalty entity)
		{
			this.SendPropertyChanging();
			entity.BorrowHeader = this;
		}
		
		private void detach_Penalties(Penalty entity)
		{
			this.SendPropertyChanging();
			entity.BorrowHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Emp_ID;
		
		private string _Emp_NIC;
		
		private string _FName;
		
		private string _LName;
		
		private string _Tel;
		
		private string _Email;
		
		private string _Add1;
		
		private string _Add2;
		
		private string _Add3;
		
		private EntitySet<Loginz> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_IDChanging(int value);
    partial void OnEmp_IDChanged();
    partial void OnEmp_NICChanging(string value);
    partial void OnEmp_NICChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAdd1Changing(string value);
    partial void OnAdd1Changed();
    partial void OnAdd2Changing(string value);
    partial void OnAdd2Changed();
    partial void OnAdd3Changing(string value);
    partial void OnAdd3Changed();
    #endregion
		
		public Employee()
		{
			this._Logins = new EntitySet<Loginz>(new Action<Loginz>(this.attach_Logins), new Action<Loginz>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_NIC", DbType="NVarChar(10)")]
		public string Emp_NIC
		{
			get
			{
				return this._Emp_NIC;
			}
			set
			{
				if ((this._Emp_NIC != value))
				{
					this.OnEmp_NICChanging(value);
					this.SendPropertyChanging();
					this._Emp_NIC = value;
					this.SendPropertyChanged("Emp_NIC");
					this.OnEmp_NICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NVarChar(30)")]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="NVarChar(30)")]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(10)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add1", DbType="NVarChar(100)")]
		public string Add1
		{
			get
			{
				return this._Add1;
			}
			set
			{
				if ((this._Add1 != value))
				{
					this.OnAdd1Changing(value);
					this.SendPropertyChanging();
					this._Add1 = value;
					this.SendPropertyChanged("Add1");
					this.OnAdd1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add2", DbType="NVarChar(100)")]
		public string Add2
		{
			get
			{
				return this._Add2;
			}
			set
			{
				if ((this._Add2 != value))
				{
					this.OnAdd2Changing(value);
					this.SendPropertyChanging();
					this._Add2 = value;
					this.SendPropertyChanged("Add2");
					this.OnAdd2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add3", DbType="NVarChar(100)")]
		public string Add3
		{
			get
			{
				return this._Add3;
			}
			set
			{
				if ((this._Add3 != value))
				{
					this.OnAdd3Changing(value);
					this.SendPropertyChanging();
					this._Add3 = value;
					this.SendPropertyChanged("Add3");
					this.OnAdd3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Login", Storage="_Logins", ThisKey="Emp_ID", OtherKey="Emp_ID")]
		public EntitySet<Loginz> Loginzs
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logins(Loginz entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Logins(Loginz entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fee")]
	public partial class Fee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Fee_ID;
		
		private System.Nullable<decimal> _Register_fee;
		
		private System.Nullable<decimal> _Penalty_fee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFee_IDChanging(int value);
    partial void OnFee_IDChanged();
    partial void OnRegister_feeChanging(System.Nullable<decimal> value);
    partial void OnRegister_feeChanged();
    partial void OnPenalty_feeChanging(System.Nullable<decimal> value);
    partial void OnPenalty_feeChanged();
    #endregion
		
		public Fee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Fee_ID
		{
			get
			{
				return this._Fee_ID;
			}
			set
			{
				if ((this._Fee_ID != value))
				{
					this.OnFee_IDChanging(value);
					this.SendPropertyChanging();
					this._Fee_ID = value;
					this.SendPropertyChanged("Fee_ID");
					this.OnFee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Register_fee", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Register_fee
		{
			get
			{
				return this._Register_fee;
			}
			set
			{
				if ((this._Register_fee != value))
				{
					this.OnRegister_feeChanging(value);
					this.SendPropertyChanging();
					this._Register_fee = value;
					this.SendPropertyChanged("Register_fee");
					this.OnRegister_feeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty_fee", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Penalty_fee
		{
			get
			{
				return this._Penalty_fee;
			}
			set
			{
				if ((this._Penalty_fee != value))
				{
					this.OnPenalty_feeChanging(value);
					this.SendPropertyChanging();
					this._Penalty_fee = value;
					this.SendPropertyChanged("Penalty_fee");
					this.OnPenalty_feeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Loginz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Login_ID;
		
		private string _UserName;
		
		private string _Pwd;
		
		private System.Nullable<int> _Emp_ID;
		
		private System.Nullable<int> _Status_ID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogin_IDChanging(int value);
    partial void OnLogin_IDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    partial void OnEmp_IDChanging(System.Nullable<int> value);
    partial void OnEmp_IDChanged();
    partial void OnStatus_IDChanging(System.Nullable<int> value);
    partial void OnStatus_IDChanged();
    #endregion
		
		public Loginz()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Login_ID
		{
			get
			{
				return this._Login_ID;
			}
			set
			{
				if ((this._Login_ID != value))
				{
					this.OnLogin_IDChanging(value);
					this.SendPropertyChanging();
					this._Login_ID = value;
					this.SendPropertyChanged("Login_ID");
					this.OnLogin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(10)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NVarChar(20)")]
		public string Pwd
		{
			get
			{
				return this._Pwd;
			}
			set
			{
				if ((this._Pwd != value))
				{
					this.OnPwdChanging(value);
					this.SendPropertyChanging();
					this._Pwd = value;
					this.SendPropertyChanged("Pwd");
					this.OnPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int")]
		public System.Nullable<int> Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int")]
		public System.Nullable<int> Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Login", Storage="_Employee", ThisKey="Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Loginzs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Loginzs.Add(this);
						this._Emp_ID = value.Emp_ID;
					}
					else
					{
						this._Emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Login", Storage="_Status", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Loginzs.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Loginzs.Add(this);
						this._Status_ID = value.Status_ID;
					}
					else
					{
						this._Status_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MainCategory")]
	public partial class MainCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MainCategory_ID;
		
		private string _MainCategory1;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainCategory_IDChanging(int value);
    partial void OnMainCategory_IDChanged();
    partial void OnMainCategory1Changing(string value);
    partial void OnMainCategory1Changed();
    #endregion
		
		public MainCategory()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainCategory_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MainCategory_ID
		{
			get
			{
				return this._MainCategory_ID;
			}
			set
			{
				if ((this._MainCategory_ID != value))
				{
					this.OnMainCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._MainCategory_ID = value;
					this.SendPropertyChanged("MainCategory_ID");
					this.OnMainCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MainCategory", Storage="_MainCategory1", DbType="NVarChar(20)")]
		public string MainCategory1
		{
			get
			{
				return this._MainCategory1;
			}
			set
			{
				if ((this._MainCategory1 != value))
				{
					this.OnMainCategory1Changing(value);
					this.SendPropertyChanging();
					this._MainCategory1 = value;
					this.SendPropertyChanged("MainCategory1");
					this.OnMainCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_Book", Storage="_Books", ThisKey="MainCategory_ID", OtherKey="MainCategory_ID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_SubCategory", Storage="_SubCategories", ThisKey="MainCategory_ID", OtherKey="MainCategory_ID")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = null;
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Penalty")]
	public partial class Penalty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Penalty_ID;
		
		private System.Nullable<int> _LateDays;
		
		private System.Nullable<decimal> _Penalty_Amount;
		
		private System.Nullable<int> _BorrowHeader_ID;
		
		private EntityRef<BorrowHeader> _BorrowHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPenalty_IDChanging(int value);
    partial void OnPenalty_IDChanged();
    partial void OnLateDaysChanging(System.Nullable<int> value);
    partial void OnLateDaysChanged();
    partial void OnPenalty_AmountChanging(System.Nullable<decimal> value);
    partial void OnPenalty_AmountChanged();
    partial void OnBorrowHeader_IDChanging(System.Nullable<int> value);
    partial void OnBorrowHeader_IDChanged();
    #endregion
		
		public Penalty()
		{
			this._BorrowHeader = default(EntityRef<BorrowHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Penalty_ID
		{
			get
			{
				return this._Penalty_ID;
			}
			set
			{
				if ((this._Penalty_ID != value))
				{
					this.OnPenalty_IDChanging(value);
					this.SendPropertyChanging();
					this._Penalty_ID = value;
					this.SendPropertyChanged("Penalty_ID");
					this.OnPenalty_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LateDays", DbType="Int")]
		public System.Nullable<int> LateDays
		{
			get
			{
				return this._LateDays;
			}
			set
			{
				if ((this._LateDays != value))
				{
					this.OnLateDaysChanging(value);
					this.SendPropertyChanging();
					this._LateDays = value;
					this.SendPropertyChanged("LateDays");
					this.OnLateDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty_Amount", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Penalty_Amount
		{
			get
			{
				return this._Penalty_Amount;
			}
			set
			{
				if ((this._Penalty_Amount != value))
				{
					this.OnPenalty_AmountChanging(value);
					this.SendPropertyChanging();
					this._Penalty_Amount = value;
					this.SendPropertyChanged("Penalty_Amount");
					this.OnPenalty_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowHeader_ID", DbType="Int")]
		public System.Nullable<int> BorrowHeader_ID
		{
			get
			{
				return this._BorrowHeader_ID;
			}
			set
			{
				if ((this._BorrowHeader_ID != value))
				{
					if (this._BorrowHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowHeader_IDChanging(value);
					this.SendPropertyChanging();
					this._BorrowHeader_ID = value;
					this.SendPropertyChanged("BorrowHeader_ID");
					this.OnBorrowHeader_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowHeader_Penalty", Storage="_BorrowHeader", ThisKey="BorrowHeader_ID", OtherKey="BorrowHeader_ID", IsForeignKey=true)]
		public BorrowHeader BorrowHeader
		{
			get
			{
				return this._BorrowHeader.Entity;
			}
			set
			{
				BorrowHeader previousValue = this._BorrowHeader.Entity;
				if (((previousValue != value) 
							|| (this._BorrowHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BorrowHeader.Entity = null;
						previousValue.Penalties.Remove(this);
					}
					this._BorrowHeader.Entity = value;
					if ((value != null))
					{
						value.Penalties.Add(this);
						this._BorrowHeader_ID = value.BorrowHeader_ID;
					}
					else
					{
						this._BorrowHeader_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BorrowHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Publisher_ID;
		
		private string _Publisher1;
		
		private string _Email;
		
		private string _Tel;
		
		private string _Add1;
		
		private string _Add2;
		
		private string _Add3;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisher_IDChanging(int value);
    partial void OnPublisher_IDChanged();
    partial void OnPublisher1Changing(string value);
    partial void OnPublisher1Changed();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnAdd1Changing(string value);
    partial void OnAdd1Changed();
    partial void OnAdd2Changing(string value);
    partial void OnAdd2Changed();
    partial void OnAdd3Changing(string value);
    partial void OnAdd3Changed();
    #endregion
		
		public Publisher()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Publisher_ID
		{
			get
			{
				return this._Publisher_ID;
			}
			set
			{
				if ((this._Publisher_ID != value))
				{
					this.OnPublisher_IDChanging(value);
					this.SendPropertyChanging();
					this._Publisher_ID = value;
					this.SendPropertyChanged("Publisher_ID");
					this.OnPublisher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Publisher", Storage="_Publisher1", DbType="NVarChar(50)")]
		public string Publisher1
		{
			get
			{
				return this._Publisher1;
			}
			set
			{
				if ((this._Publisher1 != value))
				{
					this.OnPublisher1Changing(value);
					this.SendPropertyChanging();
					this._Publisher1 = value;
					this.SendPropertyChanged("Publisher1");
					this.OnPublisher1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(10)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add1", DbType="NVarChar(100)")]
		public string Add1
		{
			get
			{
				return this._Add1;
			}
			set
			{
				if ((this._Add1 != value))
				{
					this.OnAdd1Changing(value);
					this.SendPropertyChanging();
					this._Add1 = value;
					this.SendPropertyChanged("Add1");
					this.OnAdd1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add2", DbType="NVarChar(100)")]
		public string Add2
		{
			get
			{
				return this._Add2;
			}
			set
			{
				if ((this._Add2 != value))
				{
					this.OnAdd2Changing(value);
					this.SendPropertyChanging();
					this._Add2 = value;
					this.SendPropertyChanged("Add2");
					this.OnAdd2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add3", DbType="NVarChar(100)")]
		public string Add3
		{
			get
			{
				return this._Add3;
			}
			set
			{
				if ((this._Add3 != value))
				{
					this.OnAdd3Changing(value);
					this.SendPropertyChanging();
					this._Add3 = value;
					this.SendPropertyChanged("Add3");
					this.OnAdd3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Book", Storage="_Books", ThisKey="Publisher_ID", OtherKey="Publisher_ID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Refree")]
	public partial class Refree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Refree_ID;
		
		private string _FName;
		
		private string _LName;
		
		private string _Position;
		
		private string _Tel;
		
		private string _Add1;
		
		private string _Add2;
		
		private string _Add3;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefree_IDChanging(int value);
    partial void OnRefree_IDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnAdd1Changing(string value);
    partial void OnAdd1Changed();
    partial void OnAdd2Changing(string value);
    partial void OnAdd2Changed();
    partial void OnAdd3Changing(string value);
    partial void OnAdd3Changed();
    #endregion
		
		public Refree()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refree_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Refree_ID
		{
			get
			{
				return this._Refree_ID;
			}
			set
			{
				if ((this._Refree_ID != value))
				{
					this.OnRefree_IDChanging(value);
					this.SendPropertyChanging();
					this._Refree_ID = value;
					this.SendPropertyChanged("Refree_ID");
					this.OnRefree_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NVarChar(30)")]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="NVarChar(30)")]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(20)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(10)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add1", DbType="NVarChar(100)")]
		public string Add1
		{
			get
			{
				return this._Add1;
			}
			set
			{
				if ((this._Add1 != value))
				{
					this.OnAdd1Changing(value);
					this.SendPropertyChanging();
					this._Add1 = value;
					this.SendPropertyChanged("Add1");
					this.OnAdd1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add2", DbType="NVarChar(100)")]
		public string Add2
		{
			get
			{
				return this._Add2;
			}
			set
			{
				if ((this._Add2 != value))
				{
					this.OnAdd2Changing(value);
					this.SendPropertyChanging();
					this._Add2 = value;
					this.SendPropertyChanged("Add2");
					this.OnAdd2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add3", DbType="NVarChar(100)")]
		public string Add3
		{
			get
			{
				return this._Add3;
			}
			set
			{
				if ((this._Add3 != value))
				{
					this.OnAdd3Changing(value);
					this.SendPropertyChanging();
					this._Add3 = value;
					this.SendPropertyChanged("Add3");
					this.OnAdd3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Refree_User", Storage="_Users", ThisKey="Refree_ID", OtherKey="Refree_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Refree = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Refree = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Register_fee")]
	public partial class Register_fee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Register_fee_ID;
		
		private System.Nullable<System.DateTime> _Register_Date;
		
		private System.Nullable<decimal> _Register_fee1;
		
		private System.Nullable<int> _User_ID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegister_fee_IDChanging(int value);
    partial void OnRegister_fee_IDChanged();
    partial void OnRegister_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegister_DateChanged();
    partial void OnRegister_fee1Changing(System.Nullable<decimal> value);
    partial void OnRegister_fee1Changed();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    #endregion
		
		public Register_fee()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Register_fee_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Register_fee_ID
		{
			get
			{
				return this._Register_fee_ID;
			}
			set
			{
				if ((this._Register_fee_ID != value))
				{
					this.OnRegister_fee_IDChanging(value);
					this.SendPropertyChanging();
					this._Register_fee_ID = value;
					this.SendPropertyChanged("Register_fee_ID");
					this.OnRegister_fee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Register_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Register_Date
		{
			get
			{
				return this._Register_Date;
			}
			set
			{
				if ((this._Register_Date != value))
				{
					this.OnRegister_DateChanging(value);
					this.SendPropertyChanging();
					this._Register_Date = value;
					this.SendPropertyChanged("Register_Date");
					this.OnRegister_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Register_fee", Storage="_Register_fee1", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Register_fee1
		{
			get
			{
				return this._Register_fee1;
			}
			set
			{
				if ((this._Register_fee1 != value))
				{
					this.OnRegister_fee1Changing(value);
					this.SendPropertyChanging();
					this._Register_fee1 = value;
					this.SendPropertyChanged("Register_fee1");
					this.OnRegister_fee1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register_fee", Storage="_User", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Register_fees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Register_fees.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Status_ID;
		
		private string _Status1;
		
		private EntitySet<Barcode> _Barcodes;
		
		private EntitySet<BorrowDetail> _BorrowDetails;
		
		private EntitySet<Loginz> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnStatus1Changing(string value);
    partial void OnStatus1Changed();
    #endregion
		
		public Status()
		{
			this._Barcodes = new EntitySet<Barcode>(new Action<Barcode>(this.attach_Barcodes), new Action<Barcode>(this.detach_Barcodes));
			this._BorrowDetails = new EntitySet<BorrowDetail>(new Action<BorrowDetail>(this.attach_BorrowDetails), new Action<BorrowDetail>(this.detach_BorrowDetails));
			this._Logins = new EntitySet<Loginz>(new Action<Loginz>(this.attach_Logins), new Action<Loginz>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Status", Storage="_Status1", DbType="NVarChar(20)")]
		public string Status1
		{
			get
			{
				return this._Status1;
			}
			set
			{
				if ((this._Status1 != value))
				{
					this.OnStatus1Changing(value);
					this.SendPropertyChanging();
					this._Status1 = value;
					this.SendPropertyChanged("Status1");
					this.OnStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Barcode", Storage="_Barcodes", ThisKey="Status_ID", OtherKey="Status_ID")]
		public EntitySet<Barcode> Barcodes
		{
			get
			{
				return this._Barcodes;
			}
			set
			{
				this._Barcodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_BorrowDetail", Storage="_BorrowDetails", ThisKey="Status_ID", OtherKey="Status_ID")]
		public EntitySet<BorrowDetail> BorrowDetails
		{
			get
			{
				return this._BorrowDetails;
			}
			set
			{
				this._BorrowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Login", Storage="_Logins", ThisKey="Status_ID", OtherKey="Status_ID")]
		public EntitySet<Loginz> Loginzs
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_Logins(Loginz entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Logins(Loginz entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategory_ID;
		
		private string _SubCategory1;
		
		private System.Nullable<int> _MainCategory_ID;
		
		private EntityRef<MainCategory> _MainCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategory_IDChanging(int value);
    partial void OnSubCategory_IDChanged();
    partial void OnSubCategory1Changing(string value);
    partial void OnSubCategory1Changed();
    partial void OnMainCategory_IDChanging(System.Nullable<int> value);
    partial void OnMainCategory_IDChanged();
    #endregion
		
		public SubCategory()
		{
			this._MainCategory = default(EntityRef<MainCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategory_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCategory_ID
		{
			get
			{
				return this._SubCategory_ID;
			}
			set
			{
				if ((this._SubCategory_ID != value))
				{
					this.OnSubCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._SubCategory_ID = value;
					this.SendPropertyChanged("SubCategory_ID");
					this.OnSubCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SubCategory", Storage="_SubCategory1", DbType="NVarChar(20)")]
		public string SubCategory1
		{
			get
			{
				return this._SubCategory1;
			}
			set
			{
				if ((this._SubCategory1 != value))
				{
					this.OnSubCategory1Changing(value);
					this.SendPropertyChanging();
					this._SubCategory1 = value;
					this.SendPropertyChanged("SubCategory1");
					this.OnSubCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainCategory_ID", DbType="Int")]
		public System.Nullable<int> MainCategory_ID
		{
			get
			{
				return this._MainCategory_ID;
			}
			set
			{
				if ((this._MainCategory_ID != value))
				{
					if (this._MainCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._MainCategory_ID = value;
					this.SendPropertyChanged("MainCategory_ID");
					this.OnMainCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_SubCategory", Storage="_MainCategory", ThisKey="MainCategory_ID", OtherKey="MainCategory_ID", IsForeignKey=true)]
		public MainCategory MainCategory
		{
			get
			{
				return this._MainCategory.Entity;
			}
			set
			{
				MainCategory previousValue = this._MainCategory.Entity;
				if (((previousValue != value) 
							|| (this._MainCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MainCategory.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._MainCategory.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._MainCategory_ID = value.MainCategory_ID;
					}
					else
					{
						this._MainCategory_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MainCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _FName;
		
		private string _LName;
		
		private string _Tel_Land;
		
		private string _Tel_Hand;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Email;
		
		private string _Add1;
		
		private string _Add2;
		
		private string _Add3;
		
		private System.Nullable<int> _User_Type_ID;
		
		private System.Nullable<int> _Refree_ID;
		
		private EntitySet<BorrowHeader> _BorrowHeaders;
		
		private EntitySet<Register_fee> _Register_fees;
		
		private EntityRef<Refree> _Refree;
		
		private EntityRef<User_Type> _User_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnTel_LandChanging(string value);
    partial void OnTel_LandChanged();
    partial void OnTel_HandChanging(string value);
    partial void OnTel_HandChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAdd1Changing(string value);
    partial void OnAdd1Changed();
    partial void OnAdd2Changing(string value);
    partial void OnAdd2Changed();
    partial void OnAdd3Changing(string value);
    partial void OnAdd3Changed();
    partial void OnUser_Type_IDChanging(System.Nullable<int> value);
    partial void OnUser_Type_IDChanged();
    partial void OnRefree_IDChanging(System.Nullable<int> value);
    partial void OnRefree_IDChanged();
    #endregion
		
		public User()
		{
			this._BorrowHeaders = new EntitySet<BorrowHeader>(new Action<BorrowHeader>(this.attach_BorrowHeaders), new Action<BorrowHeader>(this.detach_BorrowHeaders));
			this._Register_fees = new EntitySet<Register_fee>(new Action<Register_fee>(this.attach_Register_fees), new Action<Register_fee>(this.detach_Register_fees));
			this._Refree = default(EntityRef<Refree>);
			this._User_Type = default(EntityRef<User_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NVarChar(30)")]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="NVarChar(30)")]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel_Land", DbType="NVarChar(10)")]
		public string Tel_Land
		{
			get
			{
				return this._Tel_Land;
			}
			set
			{
				if ((this._Tel_Land != value))
				{
					this.OnTel_LandChanging(value);
					this.SendPropertyChanging();
					this._Tel_Land = value;
					this.SendPropertyChanged("Tel_Land");
					this.OnTel_LandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel_Hand", DbType="NVarChar(10)")]
		public string Tel_Hand
		{
			get
			{
				return this._Tel_Hand;
			}
			set
			{
				if ((this._Tel_Hand != value))
				{
					this.OnTel_HandChanging(value);
					this.SendPropertyChanging();
					this._Tel_Hand = value;
					this.SendPropertyChanged("Tel_Hand");
					this.OnTel_HandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add1", DbType="NVarChar(100)")]
		public string Add1
		{
			get
			{
				return this._Add1;
			}
			set
			{
				if ((this._Add1 != value))
				{
					this.OnAdd1Changing(value);
					this.SendPropertyChanging();
					this._Add1 = value;
					this.SendPropertyChanged("Add1");
					this.OnAdd1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add2", DbType="NVarChar(100)")]
		public string Add2
		{
			get
			{
				return this._Add2;
			}
			set
			{
				if ((this._Add2 != value))
				{
					this.OnAdd2Changing(value);
					this.SendPropertyChanging();
					this._Add2 = value;
					this.SendPropertyChanged("Add2");
					this.OnAdd2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add3", DbType="NVarChar(100)")]
		public string Add3
		{
			get
			{
				return this._Add3;
			}
			set
			{
				if ((this._Add3 != value))
				{
					this.OnAdd3Changing(value);
					this.SendPropertyChanging();
					this._Add3 = value;
					this.SendPropertyChanged("Add3");
					this.OnAdd3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Type_ID", DbType="Int")]
		public System.Nullable<int> User_Type_ID
		{
			get
			{
				return this._User_Type_ID;
			}
			set
			{
				if ((this._User_Type_ID != value))
				{
					if (this._User_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._User_Type_ID = value;
					this.SendPropertyChanged("User_Type_ID");
					this.OnUser_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refree_ID", DbType="Int")]
		public System.Nullable<int> Refree_ID
		{
			get
			{
				return this._Refree_ID;
			}
			set
			{
				if ((this._Refree_ID != value))
				{
					if (this._Refree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefree_IDChanging(value);
					this.SendPropertyChanging();
					this._Refree_ID = value;
					this.SendPropertyChanged("Refree_ID");
					this.OnRefree_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BorrowHeader", Storage="_BorrowHeaders", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<BorrowHeader> BorrowHeaders
		{
			get
			{
				return this._BorrowHeaders;
			}
			set
			{
				this._BorrowHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register_fee", Storage="_Register_fees", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<Register_fee> Register_fees
		{
			get
			{
				return this._Register_fees;
			}
			set
			{
				this._Register_fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Refree_User", Storage="_Refree", ThisKey="Refree_ID", OtherKey="Refree_ID", IsForeignKey=true)]
		public Refree Refree
		{
			get
			{
				return this._Refree.Entity;
			}
			set
			{
				Refree previousValue = this._Refree.Entity;
				if (((previousValue != value) 
							|| (this._Refree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Refree.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Refree.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Refree_ID = value.Refree_ID;
					}
					else
					{
						this._Refree_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Refree");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Type_User", Storage="_User_Type", ThisKey="User_Type_ID", OtherKey="User_Type_ID", IsForeignKey=true)]
		public User_Type User_Type
		{
			get
			{
				return this._User_Type.Entity;
			}
			set
			{
				User_Type previousValue = this._User_Type.Entity;
				if (((previousValue != value) 
							|| (this._User_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Type.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User_Type.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._User_Type_ID = value.User_Type_ID;
					}
					else
					{
						this._User_Type_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowHeaders(BorrowHeader entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BorrowHeaders(BorrowHeader entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Register_fees(Register_fee entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Register_fees(Register_fee entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
